PART
{
	name = KBSMotor
	module = Part
	author = Squad, Randazzo

	MODEL
	{
		model = 	KGEx/VanguardAstrodynamics/BoosterSegments/parts/KBSMotor
		texture = solid_booster_cm , Squad/Parts/Engine/MassiveSRB/solid_booster_cm	
		texture = solid_booster_em  , Squad/Parts/Engine/MassiveSRB/solid_booster_em	
		texture = solid_booster_nm_NRM , Squad/Parts/Engine/MassiveSRB/solid_booster_nm
		scale = 1.25, 1.0, 1.25
	}
	rescaleFactor = 1.0

	node_stack_top = 0.0, 2.9854, 0.0, 0.0, 1.0, 0.0, 1
	node_stack_bottom = 0.0, -1.2904, 0.0, 0.0, -1.0, 0.0, 1
	node_attach = 0.0, 0.0, -0.635, 0.0, 0.0, 1.0

	TechRequired = heavyRocketry
	entryCost = 4000
	cost = 900
	category = Propulsion
	subcategory = 0
	title = SRB-KBS25k Segmented SRB System Motor
	manufacturer = #autoLOC_501638 //#autoLOC_501638 = Kerbodyne
	description = This SRB motor is the main component of the KBS segmented SRB booster system. It is precisely as powerful as a standard Kickback SRB.
	attachRules = 1,1,1,1,0

	mass = 1.5
	heatConductivity = 0.06 // 1/2 default
	skinInternalConductionMult = 4.0
	emissiveConstant = 0.5 // yes, it's white. But let's claim it's an emissive white...
	dragModelType = default
	maximum_drag = 0.3
	minimum_drag = 0.2
	angularDrag = 2
	breakingForce = 200
	breakingTorque = 200
	crashTolerance = 7
	maxTemp = 2200 // = 3900

	stagingIcon = SOLID_BOOSTER

	bulkheadProfiles = size1, srf
	tags = #autoLOC_500462 //#autoLOC_500462 = (back (kick (kickback moar (more motor rocket srb

	EFFECTS
	{
		running_closed
		{
			AUDIO
			{
				channel = Ship
				clip = sound_rocket_hard
				volume = 0.0 0.0
				volume = 1.0 1.0
				pitch = 0.0 0.2
				pitch = 1.0 1.0
				loop = true
			}
			PREFAB_PARTICLE
			{
				prefabName = fx_smokeTrail_veryLarge
				transformName = smokePoint
				emission = 0.0 0.0
				emission = 0.05 0.0
				emission = 0.075 0.25
				emission = 1.0 1.25
				speed = 0.0 0.25
				speed = 1.0 1.0
				localOffset = 0, 0, 1
			}
			MODEL_MULTI_PARTICLE
			{
				modelName = Squad/FX/SRB_Large
				transformName = thrustTransform
				emission = 0.0 0.0
				emission = 0.05 0.0
				emission = 0.075 0.25
				emission = 1.0 1.25
				speed = 0.0 0.5
				speed = 1.0 1.2
			}
			MODEL_PARTICLE
			{
				modelName = Squad/FX/SRB_LargeSparks
				transformName = thrustTransform
				emission = 0.0 0.0
				emission = 0.05 0.0
				emission = 0.075 0.25
				emission = 1.0 1.25
				speed = 0.0 0.5
				speed = 1.0 1.2
			}
		}
		engage
		{
			AUDIO
			{
				channel = Ship
				clip = sound_vent_medium
				volume = 1.0
				pitch = 2.0
				loop = false
			}
		}
		flameout
		{
			PREFAB_PARTICLE
			{
				prefabName = fx_exhaustSparks_flameout_2
				transformName = thrustTransform
				oneShot = true
			}
			AUDIO
			{
				channel = Ship
				clip = sound_explosion_low
				volume = 1.0
				pitch = 2.0
				loop = false
			}
		}
	}

// ModuleEnginesFX
	MODULE
	{
		name = ModuleEnginesFX
		thrustVectorTransformName = thrustTransform
		engineID = KBSRB
		powerEffectName = running_closed
		throttleLocked = True
		exhaustDamage = True
		ignitionThreshold = 0.1
		minThrust = 0
		maxThrust = 670
		heatProduction = 315
		useEngineResponseTime = True
		engineAccelerationSpeed = 8.0
		allowShutdown = False
		fxOffset = 0, 0, 0.35
		EngineType = SolidBooster
		exhaustDamageDistanceOffset = 0.8
		PROPELLANT
		{
			name = SolidFuel
			resourceFlowMode = STAGE_STACK_FLOW_BALANCE
			ratio = 1.0
			DrawGauge = True
		}
		atmosphereCurve
		{
			key = 0 220
			key = 1 195
			key = 7 0.001
		}

// Public Attributes
	// From ModuleEnginesFX
	allowRestart = false
	allowShutdown = false
	atmChangeFlow = false	// Atmospheric density will change fuel flow (and thus thrust)
	disableUnderwater = true	// Temp and module values. More...

	// From PartModule
	isEnabled = true
	moduleIsEnabled = true
	showUpgradesInModuleInfo = false
	upgradesApply = true
	upgradesAsk = true
	}

// FXModuleAnimateThrottle
	MODULE
	{
		name = FXModuleAnimateThrottle
		animationName = KBSegmentMotorHeat
		responseSpeed = 0.002
		dependOnEngineState = True
		dependOnThrottle = True
// Public Attributes
	// bool 	affectTime = true
	// string 	animationName = "throttleAnim"
	// float 	animState
	// int 	animWrapMode = 8
	// float 	baseAnimSpeed = 0f
	// float 	baseAnimSpeedMult = 1f
	// bool 	dependOnEngineState = false
	// bool 	dependOnOutput = false
	// bool 	dependOnThrottle = false
	// int 	engineIndex = 0
	// string 	engineName
	// int 	layer = 1
	// bool 	playInEditor = false
	// bool 	preferMultiMode = false
	// float 	responseSpeed = 0.5f
	// bool 	weightOnOperational = false
	}

	// ModuleGimbal
	MODULE
	{
		name = ModuleGimbal
		gimbalTransformName = thrustTransform
		gimbalRange = 1
		gimbalResponseSpeed = 10
		useGimbalResponseSpeed = true
		enablePitch = true
		enableRoll = true
		enableYaw = true
		flipYZ = false
		gimbalActive = false
		gimbalLimiter = 100 // float
		gimbalLock = false
	}

// ModuleSurfaceFX
	MODULE
	{
		name = ModuleSurfaceFX
		thrustProviderModuleIndex = 0
		fxMax = 1
		maxDistance = 80
		falloff = 2
		thrustTransformName = thrustTransform
	}

// SolidFuel
	RESOURCE
	{
		name = SolidFuel
		amount = 650
		maxAmount = 650
	}

	MODULE
	{
		name = ModuleTestSubject
		useStaging = True
		useEvent = True
		situationMask = 60
		CONSTRAINT
		{
			// disable all but home
			type = SITUATION
			value = 0
			body = _NotHome
			prestige = Trivial
		}
		CONSTRAINT
		{
			// disable all but home
			type = SITUATION
			value = 0
			body = _NotHome
			prestige = Significant
		}
		CONSTRAINT
		{
			type = REPEATABILITY
			value = ALWAYS
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = REPEATABILITY
			value = BODYANDSITUATION
			prestige = Significant
		}
		CONSTRAINT
		{
			type = REPEATABILITY
			value = ONCEPERPART
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = GT
			value = 4000
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = LT
			value = 8000
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = GT
			value = 2000
			prestige = Significant
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = LT
			value = 4000
			prestige = Significant
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = GT
			value = 1000
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = LT
			value = 2000
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = ALTITUDE
			test = GT
			value = 0 // this just registers altitude as something to care about
			situationMask = 8
		}
		CONSTRAINT
		{
			type = ALTITUDE
			test = LT
			value = 300000
			situationMask = 16
			body = _NotSun
		}
		CONSTRAINT
		{
			type = ALTITUDE
			test = LT
			value = 600000
			situationMask = 32
			body = _NotSun
		}
		CONSTRAINT
		{
			type = SPEED
			test = GT
			value = 0
			situationMask = 8
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = SPEED
			test = LT
			value = 600
			situationMask = 8
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = SPEED
			test = GT
			value = 0
			situationMask = 8
			prestige = Significant
		}
		CONSTRAINT
		{
			type = SPEED
			test = LT
			value = 900
			situationMask = 8
			prestige = Significant
		}
		CONSTRAINT
		{
			type = SPEED
			test = GT
			value = 300
			situationMask = 8
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = SPEED
			test = LT
			value = 1200
			situationMask = 8
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = SPEEDENV
			test = LT
			value = 200
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = SPEEDENV
			test = GT
			value = 100
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = SPEEDENV
			test = LT
			value = 100
			prestige = Significant
		}
		CONSTRAINT
		{
			type = SPEEDENV
			test = GT
			value = 50
			prestige = Significant
		}
		CONSTRAINT
		{
			type = SPEEDENV
			test = LT
			value = 50
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = SPEEDENV
			test = GT
			value = 20
			prestige = Exceptional
		}
	}
}
